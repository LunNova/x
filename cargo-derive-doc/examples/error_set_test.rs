// SPDX-FileCopyrightText: 2025 LunNova
// SPDX-FileContributor: mcmah309 <https://github.com/mcmah309>
//
// SPDX-License-Identifier: Apache-2.0
//! Example of cargo-derive-doc in use with a function like macro
//! error_set! invocation lifted from https://github.com/mcmah309/error_set/blob/master/README.md
#![allow(dead_code, unused)]

use error_set::error_set;

// <generated by cargo-derive-doc>
// Macro expansions:
//   pub enum MediaError
//   impl  core::error::Error for MediaError
//   impl  core::fmt::Display for MediaError
//   impl  From <DownloadError> for MediaError
//   impl  From <BookParsingError> for MediaError
//   impl  From <BookSectionParsingError> for MediaError
//   impl  From <std::io::Error> for MediaError
//   pub enum DownloadError
//   impl  core::error::Error for DownloadError
//   impl  core::fmt::Display for DownloadError
//   impl  From <std::io::Error> for DownloadError
//   pub enum BookParsingError
//   impl  core::error::Error for BookParsingError
//   impl  core::fmt::Display for BookParsingError
//   impl  From <BookSectionParsingError> for BookParsingError
//   pub enum BookSectionParsingError
//   impl  core::error::Error for BookSectionParsingError
//   impl  core::fmt::Display for BookSectionParsingError
// </generated by cargo-derive-doc>
error_set! {
	/// The syntax below aggregates the referenced error variants
	MediaError = DownloadError || BookParsingError;

	/// Since all variants in [DownloadError] are in [MediaError], a
	/// [DownloadError] can be turned into a [MediaError] with just `.into()` or `?`.
	DownloadError = {
		#[display("Easily add custom display messages")]
		InvalidUrl,
		/// The `From` trait for `std::io::Error` will also be automatically derived
		#[display("Display messages work just like the `format!` macro {0}")]
		IoError(std::io::Error),
	};

	/// Traits like `Debug`, `Display`, `Error`, and `From` are all automatically derived
	#[derive(Clone)]
	BookParsingError = { MissingBookDescription, } || BookSectionParsingError;

	BookSectionParsingError = {
		/// Inline structs are also supported
		#[display("Display messages can also reference fields, like {field}")]
		MissingField {
			field: String
		},
		NoContent,
	};
}

fn main() {
	todo!()
}
